unsigned int depthMapFBO;
    glGenFramebuffers(1, &depthMapFBO);
    glBindFramebuffer(GL_FRAMEBUFFER , depthMapFBO);

    const unsigned int SHADOW_WIDTH = 1024, SHADOW_HEIGHT = 1024;

    unsigned int depthMap;
    glGenTextures(1, &depthMap);
    //glActiveTexture(GL_TEXTURE1);
    glBindTexture(GL_TEXTURE_2D, depthMap);
    glTexImage2D(GL_TEXTURE_2D, 0, GL_DEPTH_COMPONENT, 
                SCR_WIDTH, SCR_HEIGHT, 0, GL_DEPTH_COMPONENT, GL_FLOAT, NULL);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT); 
    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
    glFramebufferTexture2D(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT, GL_TEXTURE_2D, depthMap, 0);


-----------------------------------------------------------------------------------------------------------------------------------------

void setDepthMap(std::vector<Mesh*> *scene, Shader* shader , unsigned int  &depthMapFBO, unsigned int &depthMap){
    
    glViewport(0, 0, 1366, 768);
    glBindFramebuffer(GL_FRAMEBUFFER, depthMapFBO);
    glClear(GL_DEPTH_BUFFER_BIT);
    glEnable(GL_DEPTH_TEST);
    glDrawBuffer(GL_NONE);
    glReadBuffer(GL_NONE);

    glm::mat4 lightView = glm::lookAt(glm::vec3(.0f, 30.0f, .0f), 
                                  glm::vec3( 0.0f, 0.0f,  0.0f), 
                                glm::vec3( 0.0f, .0f,  1.0f)); 
    
    glm::mat4 lightProjection = glm::ortho(-10.0f, 10.0f, -10.0f, 10.0f, 1.0f, 35.0f);

    glm::mat4 lightSpaceMatrix =  lightProjection * lightView;
    //glm::mat4 lightSpaceMatrix = *camera->getProjectionMatrix() * *camera->getViewMatrix();

    shader->use();

    shader->setMat4("lightSpaceMatrix" , lightSpaceMatrix);

    for (int i = 0; i <= scene->size() - 1; i++)
    {
        Mesh *element = scene->data()[i];

        element->render(shader);
        std::vector<Mesh*> children = element->getChildren();
        for(uint i=0 ; i < children.size() ; i++){
            children[i]->render(shader);
        }
    }

    glBindFramebuffer(GL_FRAMEBUFFER , 0);

}

-----------------------------------------------------------------------------------------------------------------------------------------------------

 glm::mat4 lightView = glm::lookAt(glm::vec3(.0f, 30.0f, .0f), 
                                  glm::vec3( 0.0f, 0.0f,  0.0f), 
                                  glm::vec3( 0.0f, .0f,  1.0f)); 
        glm::mat4 lightProjection = glm::ortho(-10.0f, 10.0f, -10.0f, 10.0f, 1.0f, 35.0f);

        glm::mat4 lightSpaceMatrix = lightView * lightProjection;


---------------------------------------------------------------------------------------------------------------------------------------